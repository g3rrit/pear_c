include"stdio"
include"stdbool"
include"stdint"
include"stdlib"
include"string"

//--------------LIST-------------------

List : struct
{
    start : ListNode* = null;

    add : (this : List*, data : void*) -> void*
    {
        entry : ListNode** = &(this->start);

        while(*entry)
        {
            entry = &((*entry)->next);
        }
        
        (*entry) = new ListNode();
        (*entry)->data = data;

        return data;
    }

    get : (this : List*, i : i32) -> void*
    {
        entry : ListNode** = &(this->start);
        count : i32 = 0;

        while((count < i) && *entry)
        {
            entry = &((*entry)->next);
            count++;
        }
        return (*entry)->data;
    }

    remove : (this : List*, i : i32) -> void*
    {   
        entry : ListNode** = &(this->start);
        count : i32 = 0;
        
        while((count < i) && *entry)
        {
            entry = &((*entry)->next);
            count++;
        }
        if((*entry)->next)
        {
            fentry : ListNode* = *entry;
            *entry = (*entry)->next;
            free(fentry);
        }
        else
        {
            free(*entry);
            *entry = null;
        }

        return (*entry)->data;
    }

    forEach : (this : List*, fun : (data : void*) -> bool) -> bool
    {
        entry : ListNode** = &(this->start);

        while(*entry)
        {
            if(!fun((*entry)->data))
                return false;
            entry = &((*entry)->next);
        }
        return true;
    }

    delete : (this : List*) -> void
    {
        entry : ListNode** = &(this->start);
        fentry : ListNode** = entry;
        
        while(*entry)
        {
            entry = &((*entry)->next); 
            free(*fentry);
            fentry = entry;
        }
    }
}

ListNode : struct
{
    data : void* = null;
    next : ListNode* = null;
}

//-------------------------------------


//-------------MAP---------------------

Map : struct
{
    start : MapNode* = null;

    add : (this : Map*, key : char*, data : void*) -> void*
    {
        entry : MapNode** = &(this->start);

        while(*entry)
        {
            entry = &((*entry)->next);
        }
    
        (*entry) = new MapNode();
        (*entry)->key = key;
        (*entry)->data = data;
        return data;
    }

    get : (this : Map*, key : char*) -> void*
    {
        entry : MapNode** = &(this->start);
        
        while(*entry)
        {
            if(strcmp((*entry)->key, key) == 0)
                return (*entry)->data;

            entry = &((*entry)->next);
        }
        return null;
    }

    remove : (this : Map*, key : char*) -> void*
    {
        entry : MapNode** = &(this->start);
        
        while(*entry)
        {
            if(strcmp((*entry)->key, key) == 0)
                break;

            entry = &((*entry)->next);
        }    
        data : void* = (*entry)->data;
        if((*entry)->next)
        {
            fentry : MapNode* = *entry;
            *entry = (*entry)->next;
            free(fentry);
        }
        else
        {
            free(*entry);
            *entry = null;
        }

        return data;
    }

    forEach : (this : Map*, fun : (data : void*) -> bool) -> bool
    {
        entry : MapNode** = &(this->start);

        while(*entry)
        {
            if(!fun((*entry)->data))
                return false;
            entry = &((*entry)->next);
        }
        return true;
    }

    delete : (this : Map*) -> void
    {
        entry : MapNode** = &(this->start);
        fentry : MapNode** = entry;
        
        while(*entry)
        {
            entry = &((*entry)->next); 
            free(*fentry);
            fentry = entry;
        }
    }
}

MapNode : struct
{
    data : void* = null;
    key : char* = null;
    next : MapNode* = null;
}

//-------------------------------------

//-------------EVENT-------------------

EventList : struct
{
    map : Map* = null;    

    add : (name : char*, fun : () -> bool) -> void
    {
        if(!event.map)
            event.map = new Map();

        tempList : List* = event.map->get(event.map, name);

        if(!tempList)
        {
            tempList = new List();
            event.map->add(event.map, name, tempList);
        }
    
        tempList->add(tempList, fun);
    } 

    dispatch : (name : char*) -> bool 
    {
        tempList : List* = event.map->get(event.map, name); 
    
        if(!tempList)
            return false;

        return tempList->forEach(tempList, &__eventDispatchForEach);        
    }

    remove : (name : char*) -> void
    {
        tempList : List* = event.map->remove(event.map, name);

        if(tempList)
        {
            tempList->delete(tempList);
            free(tempList);
        }
    }

    delete : () -> void
    {
        event.map->forEach(event.map, &__eventDeleteForEach);
        free(event.map);
    }
    
} : event

__eventDispatchForEach : (data : () -> bool) -> bool
{
    return data(); 
}

__eventDeleteForEach : (data : void*) -> bool
{
    tempList : List* = data;

    if(tempList)
    {
        tempList->delete(tempList);
        free(tempList);
    }

    return true;
}

//-------------------------------------



