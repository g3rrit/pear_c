include"stdio"
include"stdbool"
include"stdint"
include"stdlib"
include"string"

//--------------LIST-------------------

List : struct
{
    start : ListNode* = null;

    size : i32 = 0;

    add : (data : void*) -> void*
    {
        entry : ListNode** = &(this->start);

        while(*entry)
        {
            entry = &((*entry)->next);
        }
        
        (*entry) = new ListNode();
        (*entry)->data = data;
        (*entry)->next = null;

        this->size++;

        return data;
    }

    get : (i : i32) -> void*
    {
        entry : ListNode** = &(this->start);
        count : i32 = 0;

        if(count >= this->size)
            return null;

        while((count < i) && *entry)
        {
            entry = &((*entry)->next);
            count++;
        }
        return (*entry)->data;
    }

    remove : (i : i32) -> void*
    {   
        entry : ListNode** = &(this->start);
        count : i32 = 0;

        if(count >= this->size)
            return null;

        while((count < i) && *entry)
        {
            entry = &((*entry)->next);
            count++;
        }

        if((*entry)->next)
        {
            fentry : ListNode* = *entry;
            *entry = (*entry)->next;
            free(fentry);
        }
        else
        {
            free(*entry);
            *entry = null;
        }

        this->size--;

        return (*entry)->data;
    }

    forEach : (fun : (data : void*) -> bool) -> bool
    {
        entry : ListNode* = (this->start);

        while(entry)
        {
            tempEntry : ListNode* = entry;
            entry = ((entry)->next);
            if(!fun((tempEntry)->data))
                return false;
        }
        return true;
    }

    delete : () -> void
    {
        entry : ListNode** = &(this->start);
        fentry : ListNode** = entry;
        
        while(*entry)
        {
            entry = &((*entry)->next); 
            free(*fentry);
            fentry = entry;
        }
    }
}

ListNode : struct
{
    data : void* = null;
    next : ListNode* = null;
}

//-------------------------------------


//-------------MAP---------------------

Map : struct
{
    start : MapNode* = null;

    size : i32 = 0;

    add : (key : char*, data : void*) -> void*
    {
        entry : MapNode** = &(this->start);

        while(*entry)
        {
            entry = &((*entry)->next);
        }
    
        (*entry) = new MapNode();
        (*entry)->key = key;
        (*entry)->data = data;
        (*entry)->next = null;

        this->size++;

        return data;
    }

    get : (key : char*) -> void*
    {
        entry : MapNode** = &(this->start);
        
        while(*entry)
        {
            if(strcmp((*entry)->key, key) == 0)
                return (*entry)->data;

            entry = &((*entry)->next);
        }
        return null;
    }

    remove : (key : char*) -> void*
    {
        entry : MapNode** = &(this->start);

        found : bool = false;
        
        while(*entry)
        {
            if(strcmp((*entry)->key, key) == 0)
            {
                found = true;
                break;
            }

            entry = &((*entry)->next);
        }    
        if(!found)
            return null;

        data : void* = (*entry)->data;
        if((*entry)->next)
        {
            fentry : MapNode* = *entry;
            *entry = (*entry)->next;
            free(fentry);
        }
        else
        {
            free(*entry);
            *entry = null;
        }

        this->size--;

        return data;
    }

    forEach : (fun : (data : void*) -> bool) -> bool
    {
        entry : MapNode* = (this->start);

        while(entry)
        {
            tempEntry : MapNode* = entry;
            entry = ((entry)->next);
            if(!fun((tempEntry)->data))
                return false;
        }
        return true;
    }

    delete : () -> void
    {
        entry : MapNode** = &(this->start);
        fentry : MapNode** = entry;
        
        while(*entry)
        {
            entry = &((*entry)->next); 
            free(*fentry);
            fentry = entry;
        }
    }
}

MapNode : struct
{
    data : void* = null;
    key : char* = null;
    next : MapNode* = null;
}

//-------------------------------------

//-------------EVENT-------------------

EventList : struct
{
    map : Map* = null;    

    add : (name : char*, id : char*, fun : (clos : void*, data : void*) -> bool, clos : void*) -> void
    {
        if(!event.map)
            event.map = new Map();

        tempMap : Map* = event.map->get(name);

        if(!tempMap)
        {
            tempMap = new Map();
            event.map->add(name, tempMap);
        }
    
        eventData : EventData* = new EventData();
        eventData->fun = fun;
        eventData->clos = clos;
        tempMap->add(id, eventData);
    } 

    dispatch : (name : char*, data : void*) -> bool 
    {
        if(!event.map)
            return true;

        tempMap : Map* = event.map->get(name); 
    
        if(!tempMap)
            return false;

        entry : MapNode* = (tempMap->start);

        while(entry)
        {
            tentry : MapNode* = entry;
            entry = ((entry)->next);
            if(!__eventDispatchForEach((tentry)->data, data))
                return false;
        }

        return true;
    }

    remove : (name : char*) -> void
    {
        if(!event.map)
            return;

        tempMap : Map* = event.map->remove(name);

        if(tempMap)
        {
            tempMap->forEach(&__eventDeleteMapForEach);
            tempMap->delete();
            free(tempMap);
        }
    }

    removeID : (name : char*, id : char*) -> void
    {
        if(!event.map)
            return;
    
        tempMap : Map* = event.map->get(name);

        if(tempMap)
        {
            free(tempMap->remove(id));
            if(tempMap->size <= 0)
            {
                tempMap->delete();
                free(tempMap);
            }
        }
    }

    delete : () -> void
    {
        if(!event.map)
            return;

        event.map->forEach(&__eventDeleteForEach);
        free(event.map);
    }
    
} : event

EventData : struct
{
    fun : (clos : void*, data : void*) -> bool;
    clos : void*; 
}

__eventDispatchForEach : (eventData : EventData*, data : void*) -> bool
{
    fun : (clos : void*, data : void*) -> bool = eventData->fun;
    return fun(eventData->clos, data);
}

__eventDeleteMapForEach : (eventData : EventData*) -> bool
{
    free(eventData);
    return true;    
}

__eventDeleteForEach : (data : void*) -> bool
{
    tempMap : Map* = data;

    if(tempMap)
    {
        tempMap->forEach(&__eventDeleteMapForEach);
        tempMap->delete();
        free(tempMap);
    }

    return true;
}

//-------------------------------------



