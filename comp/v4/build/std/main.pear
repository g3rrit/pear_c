include"pstd"

main : () -> int
{
    printf("listTest\n");

    list : List* = new List();
    list->add(list, "list");
    list->add(list, "is");
    list->add(list, "working");

    for(i : i32 = 0; i < 3; i++)
    {
        printf("%i : %s \n", i, list->get(list,i));
    }

    list->remove(list,1);

    for(i : i32  = 0; i < 2; i++)
    {
        printf("%i : %s \n", i, list->get(list,i));
    }

    list->delete(list);

    printf("maptest\n");

    map : Map* = new Map();
    map->add(map, "gerrit", "proessl");
    map->add(map, "dominik", "ermer");
    map->add(map, "sophie", "meckl");

    printf("key: gerrit val: %s\n", map->get(map, "gerrit"));
    printf("key: dominik val: %s\n", map->get(map,"dominik"));
    printf("key: sophie val: %s\n", map->get(map,"sophie"));

    map->remove(map, "sophie");
    
    if(map->get(map, "sophie"))
    {
        printf("map key sophie not null error!\n");
        printf("map: %s\n", map->get(map,"sophie"));
    }
    else
    {
        printf("map key sophie null working!\n");
    }

    map->forEach(map, &printNames);

    map->delete(map);

    event.add("test", "id1", &eventf1, "clos1");
    event.add("test", "id2", &eventf2, "clos2");
    event.add("test", "id3", &eventf3, "clos3");
    event.add("test1", "id4", &eventf1, "clos4");
    event.add("test1", "id5", &eventf1, "clos5");
    event.add("test2", "id6", &eventf1, "clos6");

    event.dispatch("test", "datah");
    event.dispatch("test1", "datac");
    event.dispatch("test2", "datab");

    event.removeID("test", "id1");
    printf("eventid1 rem\n");

    event.dispatch("test", "datah");
    event.dispatch("test1", "datac");
    event.dispatch("test2", "datab");
        
    event.remove("test1");
    printf("ev test1 rem \n");

    event.dispatch("test", "datah");
    event.dispatch("test1", "datac");
    event.dispatch("test2", "datab");

    printf("foreach problem!!!!!\n");
    
    fmap : Map* = new Map();
   /* 
    testu1 : TestU* = new TestU();
    testu1->fmap = fmap;
    testu1->id = "id1";

    testu2 : TestU* = new TestU();
    testu2->fmap = fmap;
    testu2->id = "id2";
    testu2->count = 1;

    testu3 : TestU* = new TestU();
    testu3->fmap = fmap;
    testu3->id = "id3";

    fmap->add(fmap, testu1->id, testu1);
    fmap->add(fmap, testu2->id, testu2);
    fmap->add(fmap, testu3->id, testu3);

    printf("fea\n");
    fmap->forEach(fmap, &testufor);

    fmap->forEach(fmap, &testufor);
    free(testu1);
    free(testu3);*/

    printf("event problem!!!\n");

    teste1 : TestU* = new TestU();
    teste1->fmap = fmap;
    teste1->id = "id1";

    teste2 : TestU* = new TestU();
    teste2->fmap = fmap;
    teste2->id = "id2";
    teste2->count = 1;

    teste3 : TestU* = new TestU();
    teste3->fmap = fmap;
    teste3->id = "id3";

    event.add("tp", "id1", teste1->update, teste1);
    event.add("tp", "id2", teste2->update, teste2);
    event.add("tp", "id3", teste3->update, teste3);

    event.dispatch("tp", null);
    event.dispatch("tp", null);
    free(teste1);
    //free(teste2);
    free(teste3);


    return 0;
}


TestU : struct
{
    fmap : Map* = null;
    count : int = 0;
    id : char*;
    update : (this : TestU*) -> bool
    {
        printf("updatinng: %s\n", this->id);
        if(this->count != 0)
        {
            printf("wehere\n");
            event.removeID("tp",  this->id);
            //printf("whut id: %s \n", this->id);
            free(this);
        }
        printf("finish updating\n");
        return true;
    }
}

testufor : (testu : TestU*) -> bool
{
    testu->update(testu);    
    return true;
}

eventf1 : (clos : char*, data : char*) -> bool
{
    printf("clos : %s --" ,clos);
    printf("eventf1%s\n",data);
    return true;
}

eventf2 : (clos : char*, data : char*) -> bool
{
    printf("clos : %s --" ,clos);
    printf("eventf2\n");
    return true;
}

eventf3 : (clos : char*, data : char*) -> bool
{
    printf("clos : %s --" ,clos);
    printf("eventf3\n");
    return true;
}

printNames : (data : void*) -> bool
{
    printf("foreach name: %s\n", (char*) data); 
    return true;
}
