local include"testl"

main : () -> int
{
    printf("start");
    printf("starting test!\n");

    checkTest("test this", testThis.test());
    checkTest("loop", testloop());
    tStruct : TestStruct = crt TestStruct();
    tStructp : TestStruct* = new TestStruct();
    checkTest("struct", tStruct.testS() && tStructp->testS());
    free(tStructp);
    checkTest("condition", testCondition());
    checkTest("args", testArgs(15,true,"test"));
    checkTest("local", testLocal());
    //List
    mlist : TestList* = new TestList();
    mlist->data = "my";
    mlist->append(&mlist, "test");
    mlist->append(&mlist, "list");
    mlist->append(&mlist, "working");
    checkTest("list", mlist->print(&mlist) == 4);
    free(mlist);
    checkTest("lib", testLib());
    checkTest("pointer", testPointer());
    checkTest("singleton", testSingleton.test());
    checkTest("functionPointer", testFuncPointer(&testFuncPointerFunc, (30 != 3)));
    testStructTag : struct TestStructTag = crt TestStructTag();
    checkTest("struct tag", testStructTag.res);
    checkTest("double arr", testExpressions());
    testidtype : TestIDType;
    testidtype = crt TestIDType();
    checkTest("id as type", testidtype.res);    
    checkTest("array access", testArray());
    checkTest("function pointer", testFunctionPointer());
    checkTest("array init", testArrayInit());
    checkTest("array in struct", testArraySt.test());

    return 0;
}

TestArrayStr : struct
{
    arr[2][2] : char* = { "one", "two", getCharta(getCharta("me","se"),getCharta("lol",getCharta("he","me"))), getCharta("well","no") };
    arr2[2] : char* = { "lel", "test" };
}

getCharta : (i : char*, l : char*) -> char*
{
    char *temp = "hello";
    return temp;
}

TestArraySt : struct
{
    arr[2] : bool = { false, true };
    arr2[2][2][2] : bool = { true, false, false, false, false, false, false, false };
    test : () -> bool
    {
        temparr : TestArrayStr* = new TestArrayStr();
        if(strcmp(*((char**)temparr->arr+2), "hello") != 0)
            return false;
        if(strcmp(temparr->arr[0][0], "one") != 0)
            return false;
        if(this->arr[1] && this->arr2[0][0][0])
            return true;
        return false;
    }
} : testArraySt

//-- TEST EMPTY
EmptyS : struct 
{
}

emptyfun : () -> void
{
}

emptyblock : () -> void
{
    if(true)
    {
    }
    else if(true)
    {
    }
    else
    {
    }
    
    for(i : int = 0; i < 2; i++)
    {
    }
    
    while(false)
    {
    }
}
//--

testArrayInit : () -> bool
{
    tempArr[] : char* = { "test", "working" };
    arr[] : char* = { "working"};
    tempArr2[3] : void* = {};

    tempExA[] : int = { 3, 7, 8, getatest(3) * 2 };

    tempAA[][2] : int = { {2,2}, {3,3}, {getatest(2),4}};

    tempAB[2][2][2] : int = { {{2,2},{3,3}}, {{4,4},{5,5}}};
    tempAC[2][2][2][2][2][2] : int;
    
    if(strcmp(arr[0], tempArr[1]) == 0)
    {
        if(tempExA[3] == 18)
        {
            if(tempAA[2][0] == 4)
                return true;
        }
    }
    return false;
}

getatest : (x : int) -> int
{
    return x * x;
}

testFunctionPointer : () -> bool
{
    temp : TestFP = crt TestFP();
    temp.fun = &testfpt;

    return temp.test(temp.fun);    
}

TestFP : struct
{
    test : (fun : () -> bool) -> bool
    {
        tfun : () -> bool = this->fun;
        return tfun() && fun();
    }

    fun : () -> bool; 
}

testfpt : () -> bool
{
    return true;
}

TestThis : struct
{
    test : () -> bool
    {
        return true;
    }
} : testThis

testArray : () -> bool
{
    tempS : int* = malloc(sizeof(int) * 10);
    testnum : TestArrayS = crt TestArrayS();
    tempS[testnum.num] = 5;
    ttestArr[10] : char;
    tttestArr[] : char = "fssf";
    res : bool = true; 
    
    for(i : int = 0; i < 10; i++)
    {
        tempS[i] = i;
    }

    for(i : int = 0; i < 10; i++)
    {
        if(tempS[i] != i)
            res = false;
    }

    return res;
}

TestArrayS : struct
{
    num : int = 6;
}

TestIDType : struct
{
    res : bool = true;
}

testExpressions : () -> bool
{
    testExS : TestExS* = new TestExS();
    testExS->start = new TestExS();

    num : i32 = 0;
    num += 10;
    testExS->start->num += 10;
    if(testExS->start->start)
    {
        return false;
    } 

    res : bool = testExS->start->test();
    
    free(testExS->start);
    free(testExS);

    return res;
}

TestExS : struct
{
    start : TestExS* = null; 
    num : i32 = 0;
    test : () -> bool
    {
        return true;
    }
}

TestStructTag : struct 
{
    res : bool = true;
}

checkTest : (name : char*,res : bool) -> void
{
    if(res)
    {
        printf("test: %s succeeded! \n", name);
    }
    else
    {
        printf("test: %s failed! \n", name);
    }
}

testFuncPointer : (testFuncP : (res : (res2 : bool) -> bool) -> bool, res : bool) -> bool
{
    return (testFuncP(&testFuncPointerRes) && res);
}

testFuncPointerFunc : (res : (res2 : bool) -> bool) -> bool
{
    return (res(10 == 10) && true);
}

testFuncPointerRes : (res2 : bool) -> bool
{
    return res2;
}

TestSingleton: struct
{
    name : char* = "tom";
    getName : () -> char*
    {
        return this->name;
    }
    test : () -> bool
    {
        if(strcmp(this->getName(), "tom") == 0)
            return true;
        
        return false;
    }
} : testSingleton


TestList : struct
{
    data : void* = null;
    next : TestList* = null;
    prev : TestList** = null;

    append : (his : TestList**, data : void*) -> bool 
    {
        while(*his)
        {
            his = &((*his)->next);
        }         
        *his = new TestList();
        (*his)->data = data;
        return true;
    }

    print : (his : TestList**) -> i32
    {  
        count : i32 = 0;
        while(*his)
        {
            printf("element: %i = %s\n", count, (char*)(*his)->data);
            his = &((*his)->next);
            count++;
        } 
        return count;
    }
}

testPointer : () -> bool
{
    testp : char* = "hello";
    testp1 : char** = &testp;    
    res : char** = malloc(sizeof(char*));
    *res = malloc(sizeof(char) * 6);
    strcpy(*res, "hello");
    if(strcmp(*res, *testp1) == 0)
    {
        free(*res);
        free(res);
        return true;
    }
    else
    {
        free(*res);
        free(res);
        return false;
    }
}

TestStruct : struct
{
    res : bool = true;
    testS : () -> bool 
    {
        return this->res;
    }
}

local testLocal : () -> bool
{
    return true; 
}

testArgs : (num: i32, res : bool, txt : char*) -> bool
{
    if(num != 15)
        res = false;

    if(strcmp("test",txt) != 0)
        res = false;
    
    return res;
}

testCondition : () -> bool
{
    res : bool = true;
    if(true || false)
    {
        res = true;
    }
    else if(true)
    {
        res = false;
    }
    else
    {
        res = false;
    }

    tnum : i32 = null;
    while(!tnum)
    {
        tnum = 10;
    }

    if(tnum != 10)
        res = false;
    
    return res;
}

testloop : () -> bool
{
    res : bool = true;

    count : i32 = 0;
    for(i : i32 = 0; i < 15; i++)
    {
        count++;        
    }
    if(count != 15)
        res = false;

    for(i : i32 = 15; i > 0; i--)
    {
        count--;
    }

    if(count != 0)
        res = false;

    while(count < (15 - 5))
    {
        count++;
    }

    if(count != 10)
        res = false;

    return res;
}
